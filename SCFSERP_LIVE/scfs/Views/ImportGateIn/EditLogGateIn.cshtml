@model IEnumerable<scfs_erp.Models.GateInDetailEditLogRow>
@{
    ViewBag.Title = "Gate In - Edit log";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/dataTables.bootstrap.css" rel="stylesheet" />
<style>
    /* Sticky table header for better visibility */
    #logTable thead th { position: sticky; top: 0; background: #2e3e4e; color: #fff; z-index: 2; }
    #logTable thead input, #logTable thead select { width: 100%; font-size: 12px; padding: 2px 6px; }
    .old-badge { background: #f2dede; color: #a94442; border-radius: 3px; padding: 2px 6px; display: inline-block; }
    .new-badge { background: #dff0d8; color: #3c763d; border-radius: 3px; padding: 2px 6px; display: inline-block; }
    .field-label { font-weight: 600; }
    .toolbar { margin: 10px 0; }
    .toolbar .form-control { display: inline-block; width: auto; min-width: 180px; }
    .group-header { background: #eef5ff; font-weight: bold; }
    .nowrap { white-space: nowrap; }
    .w-150 { min-width:150px; }
    .w-220 { min-width:220px; }
    .muted { color:#777; font-size:12px; }
    .legend span { margin-right: 10px; }
    .legend .old-badge, .legend .new-badge { padding: 3px 8px; }
    td.details-control { cursor: pointer; text-align: center; width: 34px; }
    td.details-control .toggle { display:inline-block; width:18px; height:18px; line-height:16px; border-radius:9px; background:#2e86de; color:#fff; font-weight:bold; }
    tr.shown td.details-control .toggle { background:#c0392b; }
    .filter-group { display:inline-block; margin-left:10px; }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <h2 class="page-header">Gate In - Edit log</h2>
        </div>
    </div>

    <div class="row" style="margin-top:5px;">
        <div class="col-md-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <strong>Log Entries</strong>
                    <span class="muted"> â€“ Click a column header to sort. Use the second header row to filter specific columns.</span>
                </div>
                <div class="panel-body">
                    <div class="table-responsive">
                        <table id="logTable" class="table table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th class="nowrap w-150">Changed On</th>
                                    <th class="nowrap">GIDID</th>
                                    <th class="nowrap">Version</th>
                                    <th class="w-220">Field</th>
                                    <th class="w-220">Old Value</th>
                                    <th class="w-220">New Value</th>
                                    <th class="nowrap">Changed By</th>
                                    <th class="nowrap">Module</th>
                                </tr>
                                <!-- per-column filters -->
                                <tr>
                                    <th></th>
                                    <th><input type="text" placeholder="Search date/time" class="form-control input-sm" /></th>
                                    <th><input type="text" placeholder="GIDID" class="form-control input-sm" /></th>
                                    <th><input type="text" placeholder="Version" class="form-control input-sm" /></th>
                                    <th><input type="text" placeholder="Field" class="form-control input-sm" /></th>
                                    <th><input type="text" placeholder="Old value" class="form-control input-sm" /></th>
                                    <th><input type="text" placeholder="New value" class="form-control input-sm" /></th>
                                    <th><input type="text" placeholder="User" class="form-control input-sm" /></th>
                                    <th><input type="text" placeholder="Module" class="form-control input-sm" /></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var row in Model)
                                {
                                    <tr>
                                        <td class="details-control"><span class="toggle">+</span></td>
                                        <td class="nowrap">@row.ChangedOn.ToString("dd-MMM-yyyy HH:mm")</td>
                                        <td class="nowrap">@row.GIDID</td>
                                        <td class="nowrap">@row.Version</td>
                                        <td class="field-label">@row.FieldName</td>
                                        <td>
                                            <span class="old-badge">@Html.Raw(HttpUtility.HtmlEncode(row.OldValue ?? string.Empty))</span>
                                        </td>
                                        <td>
                                            <span class="new-badge">@Html.Raw(HttpUtility.HtmlEncode(row.NewValue ?? string.Empty))</span>
                                        </td>
                                        <td class="nowrap">@row.ChangedBy</td>
                                        <td class="nowrap">@row.Modules</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/Scripts/datatables/jquery.dataTables.js"></script>
    <script src="~/Scripts/datatables/dataTables.bootstrap.js"></script>
    <script>
        $(function () {
            var table = $('#logTable').DataTable({
                order: [[2, 'desc'], [3, 'desc'], [1, 'desc']],
                pageLength: 50,
                lengthMenu: [10, 25, 50, 100, 250],
                stateSave: true,
                autoWidth: false,
                columns: [
                    { orderable: false, searchable: false }, // details-control
                    { type: 'string' }, // Changed On
                    { type: 'num' },    // GIDID
                    { type: 'string' }, // Version
                    { type: 'string' }, // Field
                    { type: 'html' },   // Old
                    { type: 'html' },   // New
                    { type: 'string' }, // User
                    { type: 'string' }  // Module
                ],
                drawCallback: function (settings) {
                    // Group rows by GIDID + Version for better readability
                    var api = this.api();
                    var rows = api.rows({ page: 'current' }).nodes();
                    var last = null;
                    api.column(2, { page: 'current' }).data().each(function (gid, i) {
                        var ver = api.cell(rows[i], 3).data();
                        var grp = gid + ' | ' + ver;
                        if (last !== grp) {
                            $(rows).eq(i).before(
                                '<tr class="group-header"><td colspan="8">' +
                                '<i class="fa fa-folder-open"></i> <strong>GIDID:</strong> ' + gid +
                                ' &nbsp; <strong>Version:</strong> ' + ver +
                                '</td></tr>'
                            );
                            last = grp;
                        }
                    });
                }
            });

            // Apply per-column filters (second header row)
            $('#logTable thead tr:eq(1) th').each(function (i) {
                var input = $('input', this);
                if (input.length) {
                    $(input).on('keyup change', function () {
                        if (table.column(i).search() !== this.value) {
                            table.column(i).search(this.value).draw();
                        }
                    });
                }
            });

            // Column visibility toggles (data-col reflects column index)
            $('.col-toggle').on('change', function () {
                var col = table.column(parseInt($(this).data('col'), 10));
                col.visible(this.checked);
            });

            // Date range filter (client-side) on Changed On column (index 1)
            function parseDt(s) {
                // expects dd-MMM-yyyy HH:mm
                if (!s) return null;
                return new Date(s);
            }
            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                var from = $('#startDate').val();
                var to = $('#endDate').val();
                if (!from && !to) return true;
                var d = parseDt(data[1]);
                if (!(d instanceof Date) || isNaN(d.getTime())) return true;
                var ok = true;
                if (from) {
                    var fd = new Date(from + ' 00:00');
                    if (d < fd) ok = false;
                }
                if (to) {
                    var td = new Date(to + ' 23:59');
                    if (d > td) ok = false;
                }
                return ok;
            });
            $('#applyDate').on('click', function (e) { e.preventDefault(); table.draw(); });
            $('#clearDate').on('click', function (e) { e.preventDefault(); $('#startDate,#endDate').val(''); table.draw(); });

            // Expand/collapse details rows
            function formatDetails(tr) {
                var row = table.row(tr).data();
                // row indexes: [0]=control, [1]=ChangedOn, [2]=GIDID, [3]=Version, [4]=Field, [5]=Old, [6]=New, [7]=User, [8]=Module
                var html = '' +
                    '<div class="well" style="margin:5px 0;">' +
                    '<div><strong>GIDID:</strong> ' + row[2] + ' &nbsp; <strong>Version:</strong> ' + row[3] + '</div>' +
                    '<div><strong>Field:</strong> ' + $('<div/>').text($(row[4]).text ? $(row[4]).text() : row[4]).html() + '</div>' +
                    '<div><strong>Old â†’ New:</strong> ' + row[5] + ' &nbsp; <i class="fa fa-angle-right"></i> &nbsp; ' + row[6] + '</div>' +
                    '<div><strong>Changed On / By:</strong> ' + row[1] + ' &nbsp; <span class="muted">(' + row[7] + ')</span></div>' +
                    '<div><strong>Module:</strong> ' + row[8] + '</div>' +
                    '<div style="margin-top:6px;">' +
                        '<a class="btn btn-xs btn-info" target="_blank" href="' + '@Url.Action("Edit","ImportGateIn")' + '/' + row[2] + '"><i class="fa fa-external-link"></i> Open Record</a>' +
                    '</div>' +
                    '</div>';
                return html;
            }
            $('#logTable tbody').on('click', 'td.details-control', function () {
                var tr = $(this).closest('tr');
                var row = table.row(tr);
                if (row.child.isShown()) {
                    row.child.hide();
                    tr.removeClass('shown');
                    $(this).find('.toggle').text('+');
                } else {
                    row.child(formatDetails(tr)).show();
                    tr.addClass('shown');
                    $(this).find('.toggle').text('âˆ’');
                }
            });

            // Helper to format date to ISO yyyy-MM-dd for server query
            function toIsoDate(val) {
                if (!val) return '';
                // new Date(val) supports dd-MMM-yyyy in most browsers; fallback to raw
                var d = new Date(val);
                if (isNaN(d.getTime())) return val; // send as-is
                var m = ('' + (d.getMonth() + 1)).padStart(2, '0');
                var day = ('' + d.getDate()).padStart(2, '0');
                return d.getFullYear() + '-' + m + '-' + day;
            }

            // Server-side filter: navigate with query params so server applies filters
            $('#applyServer').on('click', function (e) {
                e.preventDefault();
                var gid = $('#cmpGid').val();
                var user = $('#fltUser').val();
                var field = $('#fltField').val();
                var version = $('#fltVersion').val();
                var from = toIsoDate($('#startDate').val());
                var to = toIsoDate($('#endDate').val());
                var url = '@Url.Action("EditLogGateIn","ImportGateIn")' +
                    '?' + $.param({ gidid: gid || null, from: from || null, to: to || null, user: user || null, fieldName: field || null, version: version || null });
                window.location.href = url;
            });

            // Export CSV with current server-side filters
            $('#exportCsv').on('click', function (e) {
                e.preventDefault();
                var gid = $('#cmpGid').val();
                var user = $('#fltUser').val();
                var field = $('#fltField').val();
                var version = $('#fltVersion').val();
                var from = toIsoDate($('#startDate').val());
                var to = toIsoDate($('#endDate').val());
                var url = '@Url.Action("EditLogGateInExport","ImportGateIn")' +
                    '?' + $.param({ gidid: gid || null, from: from || null, to: to || null, user: user || null, fieldName: field || null, version: version || null });
                window.location.href = url;
            });

            // Version compare: navigate to compare page
            $('#goCompare').on('click', function (e) {
                e.preventDefault();
                var gid = $('#cmpGid').val();
                var a = $('#cmpA').val();
                var b = $('#cmpB').val();
                if (!gid || !a || !b) {
                    alert('Please enter GIDID, Version A and Version B to compare.');
                    return;
                }
                var url = '@Url.Action("EditLogGateInCompare","ImportGateIn")' +
                    '?' + $.param({ gidid: gid, versionA: a, versionB: b });
                window.location.href = url;
            });
        });
    </script>
}
